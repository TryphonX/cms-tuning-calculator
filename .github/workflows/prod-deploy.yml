# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deployment

on:
    # Runs on pushes targeting the default branch
    push:
        branches: ['main']

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
    contents: write
    pages: write
    id-token: write
    pull-requests: write
    actions: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
    group: 'pages'
    cancel-in-progress: false

jobs:
    update-timestamp:
        name: Update LAST_PUBLISH
        runs-on: ubuntu-latest
        outputs:
            new-release-published: ${{ steps.semantic.outputs.new-release-published }}
            new-release-version: ${{ steps.semantic.outputs.new-release-version }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  ref: main
                  fetch-depth: 0
                  token: ${{ secrets.FINE_GRAINED_PAT }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Run semantic-release
              id: semantic
              run: npx semantic-release
              env:
                  GITHUB_TOKEN: ${{ secrets.FINE_GRAINED_PAT }}

            - name: Debug semantic-release outputs
              run: |
                  echo "new-release-published: '${{ steps.semantic.outputs.new-release-published }}'"
                  echo "new-release-version: '${{ steps.semantic.outputs.new-release-version }}'"
                  echo "All outputs: ${{ toJson(steps.semantic.outputs) }}"

            - name: Update LAST_PUBLISH timestamp
              if: steps.semantic.outputs.new-release-published == 'true'
              run: |
                  echo "New release published: v${{ steps.semantic.outputs.new-release-version }}"
                  echo "Updating LAST_PUBLISH timestamp for deployment"

                  # Get current timestamp
                  CURRENT_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                  echo "Setting LAST_PUBLISH to: $CURRENT_TIME"

                  # Update the LAST_PUBLISH value in .env file
                  if [ -f .env ]; then
                    # Update existing LAST_PUBLISH line or add if it doesn't exist
                    sed -i '/^LAST_PUBLISH=/d' .env
                    echo "LAST_PUBLISH=$CURRENT_TIME" >> .env
                  else
                    # Create .env file if it doesn't exist
                    echo "LAST_PUBLISH=$CURRENT_TIME" > .env
                  fi

                  # Check if there are changes to commit
                  if git diff --quiet .env; then
                    echo "No changes to commit"
                  else
                    # Commit it back to the repo
                    git config --local user.email "action@github.com"
                    git config --local user.name "GitHub Action"
                    git add .env
                    git commit -m "chore: update release timestamp [skip ci]"
                    git push
                  fi

                  echo "Updated LAST_PUBLISH to: $CURRENT_TIME"

            - name: Skip timestamp update
              if: steps.semantic.outputs.new-release-published != 'true'
              run: |
                  echo "No new release published, skipping LAST_PUBLISH update"

    test:
        name: Test & Coverage
        runs-on: ubuntu-latest
        needs: [update-timestamp]
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Run tests
              run: npm run test:coverage
    # Build job
    build:
        runs-on: ubuntu-latest
        needs: [test, update-timestamp]
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Detect package manager
              id: detect-package-manager
              run: |
                  if [ -f "${{ github.workspace }}/yarn.lock" ]; then
                    echo "manager=yarn" >> $GITHUB_OUTPUT
                    echo "command=install" >> $GITHUB_OUTPUT
                    echo "runner=yarn" >> $GITHUB_OUTPUT
                    exit 0
                  elif [ -f "${{ github.workspace }}/package.json" ]; then
                    echo "manager=npm" >> $GITHUB_OUTPUT
                    echo "command=ci" >> $GITHUB_OUTPUT
                    echo "runner=npx --no-install" >> $GITHUB_OUTPUT
                    exit 0
                  else
                    echo "Unable to determine package manager"
                    exit 1
                  fi
            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: ${{ steps.detect-package-manager.outputs.manager }}
            - name: Setup Pages
              uses: actions/configure-pages@v5
              with:
                  # Automatically inject basePath in your Next.js configuration file and disable
                  # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
                  #
                  # You may remove this line if you want to manage the configuration yourself.
                  static_site_generator: next
            - name: Restore cache
              uses: actions/cache@v4
              with:
                  path: |
                      .next/cache
                  # Generate a new cache whenever packages or source files change.
                  key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
                  # If source files changed but packages didn't, rebuild from a prior cache.
                  restore-keys: |
                      ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
            - name: Install dependencies
              run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
            - name: Build with Next.js
              run: ${{ steps.detect-package-manager.outputs.runner }} next build
            - name: Upload artifact
              uses: actions/upload-pages-artifact@v3
              with:
                  path: ./out

    # Deployment job
    # deploy:
    #     environment:
    #         name: github-pages
    #         url: ${{ steps.deployment.outputs.page_url }}
    #     runs-on: ubuntu-latest
    #     needs: [test, update-timestamp, build]
    #     steps:
    #         - name: Deploy to GitHub Pages
    #           id: deployment
    #           uses: actions/deploy-pages@v4
